
SESION 1

Programacion: Serie de datos que el ordenador interpreta como un programa a traves de un compilador.
COBOL de los primeros lenguajes de programacion
SQL 1978 sigue en uso y sigue evolucionando.
C++ para software con gran rendimiento ( google chrome lo usa)
Whatsapp esta programado con EARLANG

1990
PHYTON se usa mucho en machine learning e inteligencia artificial
HTML para web
JAVASCRIPT va de la mano de HTML
PHP
JAVA

actionscrip utilizado para implementar la tecnologia flash
c shark para programar juegos en unity
swift para aplicaciones en mac os

BACKEND 

GO lenguaje para el backend nacida en 2009

lenguaje compilado
lenguaje objeto (secuencia de comandos ) lo transforma a reprenstacion binaria entendible por el computador

lenguaje interpretado

No se transforma a un codigo que entienda nuestra maquina si no que otro programa lo interpreta como phyton o java
Son mas facilmente depurables pero mas lentos de ejecutar

APLICACIONES WEB (DISEÑO FUNCIONALIDAD)
FUNCIONAN MEDIANTE ACCIONES
SE ESTRUCTURAN CON UN PATRON:

-FRONT END ES LA INTERFAZ QUE SE VE

HTML ESTRUCTURA DE PAGINA
CSS MAQUETACION DE LA PAGINA (TIPOGRAFIA COLOR ETC)
JAVASCRIPT PARA LA FUNCIONALIDAD NOS PERMITE ENCADENAR UN FRONT END CON UN BACKEND DEL MODO QUE ES EL QUE MANDA LA INFORMACION AL SERVIDOR BACKEND

-BACK END SERVICIO ESCRITO EN CUALQUIER LENGUAJE DE PROGRAMACION

APLICACIONES ESCRITORIO ORIENTADAS A EVENTOS

TIENEN UN BUCLE PARA ESCUCHAR LOS EVENTOS QUE PASAN AL PINCHAR EN ALGUN LADO


APLICACIONES MOVILES ORIENTADAS A VISTAS

NOS PERMITE QUE TENGAMOS LA VISTA FOCALIZADA A UN UNICO EVENTO

APLICACIONES CLIENTE - SERVIDOR
PUEDEN SER DE TIPO CLIENTE O DE TIPO CLIENTE- SERVIDOR

LA APLICACION SE COMUNICA CON OTRA APLICACION

TWITTER funciona como cliente-servidor

CLIENTE - SERVIDOR TWITTER - RESTO DE CLIENTES

APLICACIONES CLIENTE SERVIDOR ES TODA AQUELLA QUE SE COMUNIQUE CON UN TERCERO (PAGINAS WEB REDES SOCIALES ETC)
SE COMUNICAN ENTRE CLIENTE SERVIDOR A TRAVES DE UNA "API" (SERIE DE COMANDOS A TRAVES DE UNAS CONVENCIONES QUE VA A UN SERVIDOR Y LO DEVOLVERA CON ESAS MISMAS CONVENCIONES DANDO UNA RESPUESTA CON LOS DATOS QUE EL ALMACENE.
API: PETICIONES CON UN FORMATO CONCRETO QUE SE ENVIA A UN SERVIDOR ( UNICA FORMA COHERENTE PARA COMUNICAR CON UN SERVIDOR

HAY PUBLICAS Y PRIVADAS POR EJEMPLO LA DE LOS BANCOS SON TOTALMENTE CERRADAS.

"API" SE USAN A TRAVES DE INTERNET "LIBRERIAS" NO SE USAN A TRAVES DE INTERNET 

LIBRERIA UN CONJUNTO DE FUNCIONES QUE SE USAN PARA EL LENGUAJE DE PROGRAMACION PARA EVITAR UN POCO LAS APIS PUBLICAS
NO SE PUEDE VER COMO ESTA HECHO EL CODIGO Y PUEDE SER NEGATIVO PERO REDUCES LOS TIEMPOS 

VARIABLE ES EL NOMBRE QUE SE LE DA A UNA DIRECCION EN LA MEMORIA Y EMPIEZA POR EL NUMERO 0 
ESA DIRECCION DE MEMORIA PUEDE CONTENER "X" DATOS

VARIABLES VARIABLES LOS DATOS PUEDEN CAMBIAR UNA VEZ INICIE EL PROGRAMA
VARIABLES CONSTANTES ES AQUELLA QUE UNA VEZ SE LE ASIGNA ALGO NO PUEDE CAMBIAR UNA VEZ SE INICIE EL PROGRAMA

SESION 2

TIPOS DE DATOS
SON UNA FORMA DE DECIRLE AL PROGRAMA COMO VA A SER EL VALOR QUE SE GUARDA EN LA MEMORIA NO SE HACE REFERENCIA A LA MEMORIA MEDIANTE DIRECCIONES SI NO MEDIANTE VARIABLES

TIPOS PRIMITIVOS Y TIPOS COMPUESTOS O COMPLEJOS

TIPOS DE DATOS SIMPLES
TIPO DE DATOS NUMERICOS - ENTEROS -
-BYTE OCUPA 8 BITS
VALOR MAXIMO Y MINIMO VA DE -127 A 128 O DEL 0 AL 255
LOS ORDENADORES SOLO ENTIENDEN DOS NUMEROS 0 Y 1 ENTONCES HABRIA QUE CALCULAR ESOS 2 NUMEROS ELEVADOS AL NUMERO DE BITS
2 ELEVADO A 8 = 256

SI SE GUARDA UN VALOR SUPERIOR AL MAXIMO O AL MINIMO SE PRODUCE UN OVERFLOW
PUEDE TENER UN COMPORTAMIENTO INESPERADO O QUE EMPIECE POR EL 0, SI PASA DEL 255 VOLVERIA AL 0 Y NO PASARIA AL 256

LA MEMORIA NO ES INFINITA, SIEMPRE ELEGIR EL TIPO QUE SE ADECUE MEJOR.

-SHORT 
SON 2 BYTES O 16 BITS
2 ELEVADO A 16 CONTANDO DESDE NEGATIVOS A POSITIVOS O SOLO POSITIVOS

EN JAVA NO SE PUEDE elegir 
EN OTROS LENGUAJES SE PUEDE DECIR CON UN MODIFICADOR QUE CUENTE DESDE EL 0 

-INT O INTEGER
SON 4 BYTES
2 ELEVADO A 32 
ES EL ESTANDAR HABITUAL
CUANDO NO SE ESTA SEGURO DE QUE VALOR SE VA A USAR SE TIRA POR EL INT PARA ESTAR SEGUROS 

-LONG
SON 8 BYTES
2 ELEVADO A 64

TIPOS DE DATOS NUMERICOS - DECIMALES -

FLOAT
4 BYTES

DOUBLE
8 BYTES

EN LOS TIPOS ENTEROS NO SE PUEDE GUARDAR LOS DECIMALES COMO EN EL CASO DE LA TEMPERATURA PARA ESO TIENEN QUE USARSE LOS DECIMALES

TIPOS DE DATOS STRING

REPRESENTA UNA SERIE DE CARACTERES

TIPO DE DATO CARACTER "CHAR"
LOS CARACTERES SON UN TIPO DE DATO DE UN UNICO CARACTER COMO LA LETRA "A" O EL "0" O EL "CARREAGE RETURN" QUE ES CUANDO LE DAS INTRO AL ORDENADOR 
LOS EMOJIS TMBN SON UN CARACTER

TIPOS DE DATO BOOLEANOS

SOLO CONTIENE DOS CARACTERES TRUE O FALSE
LAS EXPRESIONES BOOL AUNQUE NO SE SOPORTE EN UN LENGUAJE EL TIPO BOOL ESTAN EN TODOS LOS LADOS


(TERMINAL)

byte varbyte = 14

TIPOS DE DATOS COMPLEJOS

ARRAY 
  COLECCION DE ELEMENTOS CON UN MISMO TIPO DE DATO ALMACENADO EN POSICIONES DE MEMORIA CONSECUTIVAS
EN CODIGO SE VERIA ASI
INT MIARRAY []

MIARRAY = NEW INT[10]
MIARRAY ={1,2,3,4,5,6,7,8,9,10}

PARA STRINGS COMILLAS "
PARA CHAR COMILLAS SIMPLES 
\U ES PARA CARACTERES ESPCIALES
 

TIPO DE DATO OBJETO

LOS OBJETOS PUEDEN TENER PROPIEDADES Y METODOS

EN PROGRAMACION UN OBJETO REPRESENTA ENTIDADES DE LA VIDA REAL

LOS METODOS SE PUEDEN LLAMAR FUNCIONES EN OTROS LENGUAJES

UN OBJETO HACE REFERENCIA A UNA POSICION EN LA MEMORIA DONDE HAY CIERTA INFORMACION ALMACENADA

ESTRUCTURAS DE DATOS

TIPOS DE DATO TUPLA

SON DICCIONARIOS QUE TIENEN UNA CLAVE ASOCIADA A UN VALOR ( TIENEN UNA PALABRA Y UNA DEFINCION DE ESE VALOR COMO EN UN DICCIONARIO )

TIPOS DE DATO SET

UNA LISTA ES UNA SECUENCIA DEL MISMO TIPO DE DATOS Y PUEDE TENER ELEMENTOS DUPLICADOS
UNA COLECCION ES UNA SECUENCIA DEL MISMO TIPO DE DATOS PERO NO PUEDE TENER ELEMENTOS DUPLICADOS

DEPENDIENDO DEL LENGUAJE LOS ELEMENTOS DUPLICADOS EN UNA COLECCION PUEDEN DESAPARECER O PUEDEN DAR ERROR

LIST<STRING> NOMBRES = NEW ARRAYLIST<>{}



2 PARADIGMAS EN EL DESAROLLO LENGUAJES TIPADOS Y NO TIPADOS

LENGUAJE TIPADOS EXIGE QUE TIPO DE DATOS ALMACENAS EN LA MEMORIA
LENGUAJE NO TIPADO DETERMINA SOBRE LA MARCHA MEDIANTE COMPILACION O INTERPRETACION VA ALMACENAR EN LA MEMORIA


SESION 3

FUNCIONES

UNA FUNCION NOS EVITA TENER QUE REPETIR CODIGO
DENTRO DE LA FUNCION PUEDE IR CUALQUIER CONSTRUCCION DEL LENGUAJE
CUANDO EN UN PROGRAMA TENEMOS QUE HACER LA MISMA TAREA MUCHAS VECES SE CREA UNA FUNCION PARA QUE NOS SIRVA PARA SIEMRE 
SI HAY UN ERROR CON SOLO CAMBIARLO EN LA FUNCION SE TRANSALADARA A TODOS LOS SITIOS DONDE SE HAYA UTILIZADO

LAS FUNCIONES TIENEN SIGNATURE O FIRMA
ESTO QUIERE DECIR COMO SE NOMBRA LA FUNCION QUE VALORES Y QUE TIPO DE DATOS VA A RETORNAR LA FUNCION SI ES QUE RETORNA ALGUNO

 
PASO POR VALOR
SE COPIA EL VALOR Y EL TIPO DEL DATO

SE DUPLICA EL USO DE MEMORIA CADA VEZ QUE INVOCAMOS LA FUNCION

PASO DE REFERENCIA
SE PASA UNA DIRECCION DE MEMORIA COMO PARAMETRO Y MODIFICA EL CONTENIDO DE UNA DIRECCION DE MEMORIA
UN PUNTERO ES UNA REFERENCIA A UN AREA DE LA MEMORIA Y ES COMO TRABAJA CON JAVA

NO SE DUPLICA EL USO DE MEMORIA CUANDO SE INVOCA LA FUNCION


FUNCION RECURSIVA ES LA QUE DEVUELVE UN VALOR Y SE INVOCA A SI MISMA (RETURN)
FUNCION CALLBACK ES ASIGNAR EL NOMBRE DE UNA FUNCION A UNA VARIABLE EN JAVA NO SE PUEDE UTILIZAR

SESION 4

SENTENCIAS DE CONTROL
UNA SERIE DE REGLAS QUE DEFINIMOS A UN PROGRAMA Y EL PROGRAMA ACTUARA DE UNA FORMA U OTRA DEPENDIENDO DE NUESTRAS INSTRUCCIONES
SE USAN LAS CONDICIONES QUE SON LAS QUE COMPARAN UNAS COSAS CON LAS OTRAS

CONDICIONALES

CONDICIONES LOGICAS
"Y" 2 O MAS COSAS DEBEN CUMPLIRSE &&
"O" 1 O NINGUNA DEBEN CUMPLIRSE ||

CONDICIONES COMPARATIVAS
"MAYOR QUE" >
"MENOR QUE" <
"MAYOR O IGUAL QUE" >=
"MENOR O IGUAL QUE" <=
"IGUAL A" ==
"DISTINTO A" !=

LAS COMPARACIONES SOLO PUEDEN TENER 2 RESULTADOS SI O NO

PARA DECLARAR UNA CONDICION (SI) "IF"

"IF" SI
"ELSE IF" EN CASO CONTRARIO SI
"ELSE" EN CASO CONTRARIO 


BUCLES

UN BUCLE ES HACER ALGO UN NUMERO O INDETERMINADO DE VECES
UN FRAGMENTO DEL CODIGO SE VA A EJECUTAR MIENTRAS SE CUMPLA UNA CONDICION

BUCLE WHILE (MIENTRAS)

SE EJECUTARA MIENTRAS SE CUMPLA LA CONDICION

VAR CONTADOR = 10


MIENTRAS CONTADOR MAYOR A CERO
	RESTA UNO AL CONTADOR

BUCLE DO WHILE 

PRIMERO EJECUTA LAS ACCIONES Y LUEGO EVALUA LA CONDICION

RESTA UNO AL CONTADOR MIENTRAS

BUCLE FOR "PARA"
TIENE TRES PARTES :DECLARACION O INICIACION - COMPARACION - ACCION

MIENTRAS QUE LA VARIABLE SEA IGUAL Y QUE LA VARIABLE CONTADOR SEA MAYOR QUE CERO ENTONCES HARAS LO QUE TENGO EN MI CUERPO Y EJECUTARAS LA ACCION

SIRVE PARA RECORRER ELEMENTOS COMO ARRAYS 

BUCLE INFINITO 



SWITCH (DISCIERNE)

CASO"VERANO"
IMPRIME " ES VERANO"

CASO "INVIERNO"
IMPRIME " ES INVIERNO"

OTRO CASO:
IMPRIME LA ESTACION DE LA VARIABLE


VAR ESTACION = VERANO

SWITCH (ESTACION)

CASE"VERANO"
SYSTE..
CASE"INVIERNO"
....
DEFAULT:
S.....


SESION 5

ERRORES

ERRORES QUE SE SUELEN COMETER AL EMPEZAR A PROGRAMAR

1º COMO LE VAMOS A LLAMAR A UNA VARIABLE / SER PRECISO CON LOS NOMBRES QUE SE LES DA

UTILIZANDO BUCLES FOR NO ES UNA MALA PRACTICA UTILIZANDO LAS LETRAS "I" "J" "K"

2º SER LOGICO CON LOS COMENTARIOS QUE SE DEJAN EN EL CODIGO Y NO DECIR OBVIEDADES, COMENTAR PERO NO EN EXCESO

3º NO MANTENER LA COHERENCIA DEL CODIGO , MANTENER LA LEGIVILIDAD DEL CODIGO

4º NO HACER CODIGOS DE SEGURIDAD , NO USAR CONTROL DE VERSIONES (GITHUB)(SOFTWARE PARA TENER TU CODIGO VERSIONADO)

5º NO COMPLICARSE LA VIDA CON FORMAS COMPLEJAS , USAR CONSTRUCIONES DE LENGUAJE COMPLICADAS

6º NO IMPRIMIR EL CODIGO PARA VERIFICAR LOS ERRORES, USAR EL DEPURADOR 

7º CREAR FUNCIONES QUE SON GRANDES , ES MEJOR CREAR FUNCIONES PEQUEÑAS Y QUE EL MAIN NO SEA GIGANTE

SESION 6

DEPURACION DEL CODIGO
CONSISTE EN BUSCAR PROBLEMAS O ANOMALIAS DURANTE LA EJECUCION DE NUESTRO PROGRAMA
HERRAMIENTA MUY UTIL E INFRAVALORADA
LA MAYORIA DE LENGUAJES SOPORTAN LA DEPURACION REMOTA Y SE PUEDE HACER DESDE NUESTRO ENTORNO DE DESARROLLO EL CODIGO EN PRODUCION

FUNCIONAN MEDIANTE PUNTOS DE RUPTURA O BREAKER ( ES UNA PARTE DONDE LE DECIMOS AL PROGRAMA QUE DEBE PARAR)

PUEDEN SER MEDIANTE LINEAS DE COMNADO

WATCHER O WATCH POINT
ES UN BREAKER QUE SOLO SE DISPARA CUANDO SE CUMPLE UNA CONDICION (BOTON DERECHO Y ESCRIBIR LA CONDICION)

PILA DE LLAMADAS
SE USA PARA SABER POR DONDE HA PASADO EL PROGRAMA

SESION 7

PROGRAMACION ORIENTADA A OBJETOS

NOS PERMITE TENER UN CODIGO LIMPIO Y SEGMENTADO PARA PROYECTOS GRANDES VIENE MUY BIEN
SIRVE PARA PROGRAMACION DE JUEGOS POR EJEMPLO CON UNREAL

UN OBJETO ES UNA ENTIDAD QUE REPRESENTA ALGO DEL MUNDO REAL

LOS OBJETOS SE DECLARAN MEDIANTE CLASES, FUNCIONES DENTRO DE ESTRUCTURAS DEPENDIENDO DEL LENGUAJE
EN JAVA ES CON CLASES

PARA CREAR UN OBJETO HAY QUE INSTANCIARLO LO QUE QUIERE DECIR QUE HAY QUE CREAR UNA ZONA EN LA MEMORIA A TRAVES DE UNA VARIABLE Y VA A TENER LO QUE TENGA LA CLASE QUE SE CREE
PARA CREAR UNA INSTANCIA Y POR TANTO CREAR UN OBJETO , PRIMERO SE PONDRA EL NOMBRE DE LA CLASE SEGUIDO DEL NOMBRE DE LA VARIABLE = NEW "" 
CUANDO SE HABLA DE FUNCIONES DENTRO DE UNA CLASE SE LE LLAMA METODOS

UN CONSTRUCTOR ES UNA FORMA DE INICIALIZAR LAS PROPIEDADES DE UNA CLASE CUANDO LA INSTANCIAMOS.

EL NOMBRE DEL CONSTRUCTOR TIENE QUE SER IGUAL AL DE LA CLASS

PUBLIC ( IGUAL AL NOMBRE DEL OBJETO )
...



LA SOBRECARGA ES TENER 2 FUNCIONES CON EL MISMO TIPADO PERO CON DIFERENTES PARAMETROS

SESION 8

PRIVACIDAD, ABSTRACCION Y ENCAPSULACION

TERMINOS LIGADOS A LA PROGRAMACION ORIENTADA A OBJETOS

UNA PROPIEDAD PRIVADA SOLO SE PUEDE USAR EN LA IMPLEMENTACION DE LA CLASE
UNA PROPIEDAD PUBLICA SE PUEDE UTILIZAR TANTO DENTRO DE LA CLASE COMO EN EL PROGRAMA

EN JAVA SE DEFINEN:
PUBLICA: PUBLIC
PRIVADA: PRIVATE

LA ENCAPSULACION CONSISTE EN JUGAR CON LOS TIPOS PUBLICOS Y PRIVADOS DE FORMA QUE DESDE LA CLASE LOS MANIPULE Y DESDE FUERA DE LA CLASE LOS PUEDA UTILIZAR

GETTERS Y SETTERS

ESTAS FUNCIONES TIENEN COMO TAREA MODIFICAR LA PROPIEDAD O DARNOS EL VALOR DE LA PROPIEDAD

LA ABSTRACION CONSISTE EN IMPLEMENTAR PARTE DE UNA CLASE Y DEJAR LA OTRA PARTE LIBRE.


SESION 9

HERENCIA CONSISTE EN QUE UNA CLASE HEREDA METODOS Y PROPIEDADES DE OTRA CLASE, A LA CLASE QUE HEREDA SE LE LLAMA CLASE HIJA Y LA CLASE QUE CEDE SUS FUNCIONES SE LE PUEDE LLAMAR PRINCIPAL

UNA CLASE PUEDE HEREDAR DE UNA CLASE YA HEREDADA REPETIDAMENTE (HERENCIA MULTINIVEL)
PARA QUE UNA CLASE NO HEREDE DE OTRA HEREDADA SE USARA LA PALABRA FINAL AL PRINCIPIO

HERENCIA MULTIPLE ES AQUELLA QUE HEREDA DE DOS PADRES

HERENCIA GERARQUICA CONSISTE QUE DE UNA CLASE BASE DERIVAN OTRAS CLASES Y DE ESAS CLASES DERIVAN OTRAS CLASES

POR EJEMPLO PODEMOS PENSAR EN UN ARBOL FAMILIAR


CLASE A
 CLASE B HERDA DE A
  CLASE UNO HEREDA DE B
  CLASE DOS HEREDA DE B
 CLASE C HEREDA DE A
  CLASE PERRO HEREDA DE C
  CLASE GATO HEREDA DE C
 CLASE D HEREDA DE A
  CLASE COCHE HEREDA DE D
  CLASE MOTO HEREDA DE D

HERENCIA HIBRIDA

LA HERENCIA COMBINA MODELOS DE HERENCIA


CLASE A
 CLASE B HEREDA DE A
 CLASE C HEREDA DE A
 CLASE D HEREDA DE B Y HEREDA DE C
 

POLIMORFISMO CONSISTE EN QUE LAS CLASES HIJAS IMPLEMENTAN LA MISMA FUNCION PERO HACEN DIFERENTES COSAS.

LAS INTERFACES NO IMPLEMENTAN NINGUNA FUNCION SI NO QUE NOS DICEN LO QUE TENEMOS QUE IMPLEMENTAR
LAS INTERFACES LAS USAMOS PARA QUE CUANDO CREAMOS CLASES Y QUE ESAS CLASES TENGAN UNAS FUNCIONES PREVIAMENTE DEFINIDAS

LAS INTERFACES SE IMPLEMENTAN CON LA PALABRA "IMPLEMENTS"


SESION 10

METODOS DE CLASE

UN METODO DE CLASE ES UNA FUNCION, QUE TENDRAN UN PROTOTIPO O FIRMA Y ESTO ES COMO LO DECLARAMOS, SI PRIVADO O PUBLICO.

[VISIBILIDAD][NOMBRE DEL METODO]([PARAMETROS])[VALOR]
PUBLICA leerLibros(TEXTO libro) TEXTO contenido

type miclase struct {}
func (m miclase) leerLibros(libro string) string {
	return "aaa";
}

class MiClase {
	public function leerLibros($libro) {
	  return "aaa" ;
   )
}

PASO POR VALOR ES CREAR UNA COPIA DE LOS VALORES SIN TOCAR LOS VALORES ORIGINALES
LA DESVENTAJA DE ESTO ES QUE DUPLIA EL USO DE MEMORIA AL DUPLIAR LOS VALORES

PASO POR REFERENCIA MODIFICA LOS VALORES ORIGINALES ALTERANDO SU VALOR
 
 
PARAMETRO OBJETO PASO POR REFENCIA
PARAMETRO NO OBJETO PASO POR VALOR

LA FUNCION RECURSIVA CONSISTE EN QUE UN METODO SE VA A LLAMAR A SI MISMO UNA VEZ TRAS OTRA
EL PROBLEMA DE LAS FUNCIONES RECURSIVAS ES QUE SI NO LO CONTROLAMOS VA A PETAR EL PROGRAMA

SESION 11

LENGUAJE COMPILADOS E INTERPRETADOS

UN COMPILADOR COGE UNA SECUENCIA DE CARACTERES Y LO CONVIERTE EN OTRA COSA, COMO SI FUESE UN TRADUCTOR 
HAY DOS TIPOS DE COMPILADOR
CODIGO MAQUINA O CODIGO A OTRO LENGUAJE

FASES DEL COMPILADOR-

1.ANALIZADOR LEXICO -> VA LEYENDO CADA CARACTER, Y SU FUNCION ES HACER UN  STRING DE TOKENS (TOKENIZAR)

PALABRA RESERVADAS VAR, IF,WHILE, DO , STATIC
IDENTIFICADORES VARIABLE
SIMBOLO ASIGNACION = =
NUMERO ENTERO = 1, 2 ,3 ,4


2.ANALISIS SINTACTICO -> VA LEYENDO LOS TOKENS GENERADOS ANTERIORMENTE Y ANALIZA SI TIENE SENTIDO LO QUE PONEMOS , ES EL QUE ARROJA LOS SINTAX ERROR
IF( NUMERO > 10) {}

1. IF
2. ABREN PARENTESIS
3. CONDICION
4. CIERRA PARENTESIS
5. ABRE LLAVE
6. EXPRESIONES
7. CIERRA LLAVE

ESTAS CONDICIONES PARA QUE EL ANALIZADOR SINTACTICO FUNCIONE Y NO DE ERRORES

-(ANALIZADOR SEMANTICO -> DESCRIBE EL SIGNIFADO DE LOS SIMBOLOS, CARACTERES DE UN LENGUAJE)

3.CODIGO INTERMEDIO -> DEJA DE USAR EL LENGUAJE ANTERIOR Y EMPIEZA A USAR UNO DE MAS BAJO NIVEL SIMPLIFICANDO EL CODIGO HUMANO A CODIGO DE DATOS PARA QUE EL COMPILADOR LO MANEJE MEJOR, UTIL PARA MUCHAS COSAS A FUTURO 
EN ESTA FASE SE GENERA UNA SERIE DE DATOS QUE LLAMAN ABSTRACT SYNTAX TREE, QUE ES UNA ESTRUCTURA QUE REPRESENTA TODO NUESTRO CODIGO PERO A NIVEL DE ESTRUCTURA DE DATOS

EJEMPLO AST   2+4
               +
             2   4 
SE LEE DE ARRIBA A ABAJO Y DE IZQ A DERECHA

4. OPTIMIZACION DEL CODIGO INTERMEDIO

ELIMINA CODIGO REDUNTANTE O QUE NO SE PODRIA EJECUTAR EN NUESTRO DESARROLLO Y BUSCA ALTERNATIVAS PARA MEJORARLO COMO PUEDE SER EL UNROLL LOOP PARA LAS FUNCIONES FOR

5. GENERACION DE CODIGO
AQUI EL COMPILADOR GENERA CODIGO MAQUINA O UN CODIGO PARA SER INTERPRETADO

5.1 OPTIMIZADOR DEL CODIGO GENERADO

-CODIGO INTERPRETADO

EL LENGUAJE QUE ESTA PREPARADO PARA SER INTERPRETADO POR UN INTERPRETE

EL LENGUAJE COMPILADO SE EJECUTA EN NUESTRO PROCESADOR A TRAVES DEL SISTEMA OPERATIVO
 EJEMPLOS DE LENGUAJE COMPILADOS  (C , C++ , RUST , GO)

EL LENGUAJE INTREPRETADO NO SON EJECUTADOS POR EL SISTEMA OPERATIVO, SE EJECUTA A TRAVES DE UNA MAQUINA VIRTUAL O INTREPRETE.
 EMEPLOS ( JAVA , PHYTON , PHP )

TODO LO QUE SE HACE EN JAVA SE INTERPRETA POR EL JVM  (JAVA VIRUTAL MACHINE)
EN EL CASO DE JAVA ESTE INTERPETE VA LEYENDO EL BYTECODE QUE SE GENERA EN LA FASE DE GENERACION DE CODIGO EN EL COMPILADOR

BYTECODE > JVM > RESULTADO FINAL

LENGUAJE COMPILADOS E INTEPRETADOS A LA VEZ 
C SHARP ES UN EJEMPLO , DONDE SE GENERA UN CODIGO INTERMEDIO LISTO PARA SER INTERPRETADO ( MSIL= MICROSOFT INTERMEDIATE LANGUAJE) PERO EL INTERPRETE SE DA CUENTA DE QUE LA MISMA PARTE DEL CODIGO SE EJECUTA MUCHAS VECES  (CODIGO CALIENTE) Y DECIDE QUE SE DEBE COMPILAR Y ESTA TECNICA SE LLAMA JIT(JUST IN TIME) 
 

LOS LENGUAJES COMPILADOS SON MUCHO MAS RAPIDOS QUE LOS INTERPRETADOS Y LOS INTERPRETADOS ES MAS SENCILLO DE DEPURAR












